import datetime
import chiripa as chi

# ***********************************************************************************
def gamess_write_optm(ffullname, dict_elements, coords,
                      gamess_keywords, chkfullpath=None,
                      nproc=1, mem=None,
                      title="Input file generated by CHIRIPA",
                      charge=0, multiplicity=1):

    """

    Args:
        ffullname:
        dict_elements:
        coords:
        gamess_keywords:
        chkfullpath:
        nproc:
        mem:
        title:
        charge:
        multiplicity:

    Returns:

    """

    # Check input parameters ******
    if coords.shape[0] != len(dict_elements):
        print("Warning!!!. The {} cannot be written. "
              "Number of atoms in element list and number of coordinates must be the same".format(ffullname))
        return False

    prefix = ffullname.split("/")[-1].split(".")[0]

    with open(ffullname,'w') as fin:

        # Write echo
        fin.writelines("! Gamess input\n\n")

        # Write $CONTRL section
        fin.writelines(" $CONTRL\n")
        fin.writelines("ICHARG={}\n".format(gamess_keywords['charge']))
        fin.writelines("MULT={}\n".format(gamess_keywords['multiplicity']))
        fin.writelines("RUNTYP={}\n".format(gamess_keywords['qm_task'].upper()))
        fin.writelines("MAXIT=200\n")
        fin.writelines("{}\n".format(gamess_keywords['qm_method'].upper()))
        fin.writelines(" $END\n\n")

        # SCF
        fin.writelines(" $SCF\n")
        fin.writelines("DAMP=.T. SOSCF=.F. DIIS=.T. ")
        fin.writelines(" $END\n\n")

        # MEMORY
        if gamess_keywords['mem_mb'] is not None:
            mem_words_64bits = gamess_keywords['mem_mb']*1024*1024*8 #bits
            mem_words_64bits = mem_words_64bits /(64*1e06)           #Mwords
            fin.writelines(" $SYSTEM  ")
            fin.writelines(" MWORDS={}".format(mem_words_64bits))
            fin.writelines("  $END\n\n")

        # BASIS SET
        fin.writelines(" $BASIS\n")
        fin.writelines("{}\n".format(gamess_keywords['basis_set']))
        fin.writelines("  $END\n\n")

        # DATA
        fin.writelines(" $DATA\n")
        fin.writelines("{}\n".format(title))
        fin.writelines("C1 0\n".format(title))
        index = 1
        for icoord in coords:
            iel = dict_elements[index - 1]
            m = chi.atomic_number[iel]
            fin.writelines("{0:s} {1:>4.1f}  {2:>12.6f} {3:>12.6f} {4:>12.6f} \n".
                            format(iel, m, icoord[0], icoord[1], icoord[2]))
            index += 1
        fin.writelines(" $END\n")

# ***********************************************************************************
def gamess_basic_local_script(maindir, inputname, gamesspath,
                              scratch_dir, cpuspertask=1, version="00", fnamescript="send.sh"):

    if scratch_dir[-1] != "/":
        scratch_dir = scratch_dir +"/"

    with open(maindir+"/"+fnamescript, 'w') as f:
        f.writelines("#!/bin/bash\n")
        f.writelines("echo \"Job Started!!! `date`\" >time.dat\n")
        f.writelines("\n")
        f.writelines("rm -f {}*\n".format(scratch_dir))
        f.writelines("export OMP_NUM_THREADS=1\n")
        f.writelines("GAMESS={}\n".format(gamesspath))
        f.writelines("INP={}\n".format(inputname+".inp"))
        f.writelines("OUT={}\n".format(inputname+".inp.log"))
        f.writelines("\n")
        f.writelines("$GAMESS $INP {} {} &>$OUT\n".format(version, cpuspertask))
        f.writelines("\n")
        f.writelines("echo \"Job Done!!! `date`\" >>time.dat\n")


# ***********************************************************************************
def gamess_basic_slurm_script(maindir,
                              inputname,
                              gamesspath,
                              scratch_dir,
                              partition,
                              nodelist=None,
                              numbernodes=1,
                              cpuspertask=1, memory=None, jobname=None,
                              version="00", fnamescript="send.sh"):

    """
    Write a script to run gamess in server with slurm queue system

    ``Parameters``::
        * **fnamescript** (type str) : Name of the script to run with sbatch
        * **g16path** (type str) : Path to the gaussian executable
        * **inputname** (type str) : name of the input file to run Gaussian
        * **partition** (type str) : name of the partition in the Slurm system
        * **nodelist** (type list) : list of nodes to run the job
        * **numbernodes** (type integer) : Number of nodes
        * **cpuspertask** (type integer) : Number of cores within the nodes
        * **memory** (type integer): Memory in Gigabytes
        * **jobname** (type str) : Name in the job list

    ``Returns``::
        * **None**

    """

    if scratch_dir[-1] != "/":
        scratch_dir += "/"

    if jobname is None:
        jobname = "gamess"

    with open(maindir+"/"+fnamescript, 'w') as f:

        f.writelines("#!/bin/bash\n")
        f.writelines("#SBATCH --partition={}\n".format(partition))
        if not nodelist is None:
            l = ""
            for item in nodelist:
                l+=item+", "
            l = l[:-1]
            f.writelines("#SBATCH --exclude=\"{}\"\n".format(l))
        f.writelines("#SBATCH -N 1\n")
        f.writelines("#SBATCH -n {}\n".format(cpuspertask))
        if not memory is None:
            f.writelines("#SBATCH --mem={}G\n".format(memory))
        f.writelines("#SBATCH --job-name={}\n".format(jobname))
        f.writelines("\n")
        f.writelines("WD=`pwd`\n")
        f.writelines("\n")
        f.writelines("cd $SLURM_SUBMIT_DIR\n")
        f.writelines("\n")
        f.writelines("export OMP_NUM_THREADS=1\n")
        f.writelines("\n")
        f.writelines("echo \"Job Started!!! `date`\"\n")
        f.writelines("rm -f {}{}*\n".format(scratch_dir,jobname))
        f.writelines("\n")
        f.writelines("GAMESS={}\n".format(gamesspath))
        f.writelines("NPROC={}\n".format(cpuspertask))
        f.writelines("INP={}\n".format(inputname+".inp"))
        f.writelines("OUT={}\n".format(inputname+".log"))
        f.writelines("\n")
        f.writelines("$GAMESS $INP {} $NPROC &>$OUT\n".format(version))
        f.writelines("\n")
        f.writelines("echo \"Job Done!!! `date`\"\n")